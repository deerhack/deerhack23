// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String               @id @unique @default(uuid())
  email              String               @unique
  password           String
  name               String
  phone              String
  dob                DateTime             @db.Date
  role               Role                 @default(PARTICIPANT)
  Notification       Notification[]
  QR                 String?
  github_profile     String?
  linkedin_profile   String?
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  Application        Application?
  Team               Team?
  TeamUser           TeamUser[]
  ApplicationAnswers ApplicationAnswers[]
}

model Team {
  id         String     @id @unique @default(uuid())
  name       String
  team_code  String
  Leader     User       @relation(fields: [leader_id], references: [id])
  leader_id  String     @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  TeamUser   TeamUser[]
}

model TeamUser {
  id         Int      @id @unique @default(autoincrement())
  Team       Team     @relation(fields: [team_id], references: [id])
  team_id    String
  User       User     @relation(fields: [user_id], references: [id])
  user_id    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Application {
  id         String   @id @unique @default(uuid())
  status     Status   @default(PENDING)
  letter     String   @db.Text
  User       User     @relation(fields: [user_id], references: [id])
  user_id    String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model ApplicationQuestions {
  id                 Int                  @id @unique @default(autoincrement())
  question           String
  ApplicationAnswers ApplicationAnswers[]
}

model ApplicationAnswers {
  id          Int                  @id @unique @default(autoincrement())
  User        User                 @relation(fields: [user_id], references: [id])
  user_id     String
  Question    ApplicationQuestions @relation(fields: [question_id], references: [id])
  question_id Int
}

model Notification {
  id                String            @id @unique @default(uuid())
  notification_type Notification_Type @default(GLOBAL)
  notification      String
  User              User?             @relation(fields: [user_id], references: [id])
  user_id           String?
  created_at        DateTime          @default(now())
  updated_at        DateTime          @updatedAt
}

model faqs {
  id         String   @id @unique @default(uuid())
  question   String
  answer     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model deerhack {
  id         String   @id @unique @default(uuid())
  key        String
  value      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model socials {
  id         String   @id @unique @default(uuid())
  name       String
  link       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model prizes {
  id         String   @id @unique @default(uuid())
  title      String
  prizes     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model tracks {
  id          String   @id @unique @default(uuid())
  logo        String
  title       String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

enum Role {
  PARTICIPANT
  ADMIN
}

enum Status {
  PENDING
  NOT_ACCEPTED
  ACCEPTED
}

enum Notification_Type {
  GLOBAL
  USER
}
